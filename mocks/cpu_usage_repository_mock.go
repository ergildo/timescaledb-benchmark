// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/cpu_usage_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	model "timescaledb-benchmark-assignment/internal/domain/model"

	gomock "github.com/golang/mock/gomock"
)

// MockCpuUsageRepository is a mock of CpuUsageRepository interface.
type MockCpuUsageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCpuUsageRepositoryMockRecorder
}

// MockCpuUsageRepositoryMockRecorder is the mock recorder for MockCpuUsageRepository.
type MockCpuUsageRepositoryMockRecorder struct {
	mock *MockCpuUsageRepository
}

// NewMockCpuUsageRepository creates a new mock instance.
func NewMockCpuUsageRepository(ctrl *gomock.Controller) *MockCpuUsageRepository {
	mock := &MockCpuUsageRepository{ctrl: ctrl}
	mock.recorder = &MockCpuUsageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCpuUsageRepository) EXPECT() *MockCpuUsageRepositoryMockRecorder {
	return m.recorder
}

// SearchByParams mocks base method.
func (m *MockCpuUsageRepository) SearchByParams(hostname string, startTime, endTime *time.Time) (*model.CpuUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByParams", hostname, startTime, endTime)
	ret0, _ := ret[0].(*model.CpuUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByParams indicates an expected call of SearchByParams.
func (mr *MockCpuUsageRepositoryMockRecorder) SearchByParams(hostname, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByParams", reflect.TypeOf((*MockCpuUsageRepository)(nil).SearchByParams), hostname, startTime, endTime)
}
